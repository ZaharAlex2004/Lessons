Додатки на Django можуть бути схильні до різних уразливостей, якщо не враховувати кращі практики безпеки при розробці.

XSS - підтип атаки на веб-системи, що полягає у впровадженні у сторінку шкідливого коду,
що видається веб-системою (який буде виконаний на комп'ютері користувача при відкритті ним цієї сторінки)
і взаємодії цього коду з веб-сервером зловмисника. Для запобігання використовують вбудовані фільтри Django для екранування
даних, що виводяться в шаблонах.


SQL injection - один з поширених засобів злому сайтів та програм, що працюють з БД, заснований на впровадженні в
запит довільного SQL-коду. Для запобігання використовують Django ORM (Object-Relational Mapping).

CSRF - атака на відвідувачей веб-сайтів, використовуючи недоліки HTTP протокола. Для запобігання вмикають захист від CSRF
у Django, що за замовчуванням увімкнено, через використання {% csrf_token %} у формах.

Clickjacking - механізм обману користувачів інтернету, при якому зловмисник може отримати доступ до конфіденційної інформації
або навіть отримати доступ до комп'ютера користувача, заманивши його на зовнішню нешкідливу сторінку або впровадивши
шкідливий код на безпечну сторінку. Для запобігання використовують HTTP-заголовок X-Frame-Options.

Параметризований запит - це тип запиту до бази даних, який використовує параметри для запобігання атакам SQL-injection.

Middleware - це інструмент, використовуваний інженерами-програмістами для інтеграції різних частин програмного забезпечення
до інших програм.

Salt - відкрите програмне забезпечення для керування конфігурацією та віддаленого виконання написане на Python.

Hashing - це перетворення інформації з допомогою спеціальних математичних формул.


Види захисту Django:

- Шифрування паролей, файлів, медіа-даних та конфіденційних даних;
- Використовування HTTPS;
- Багатофакторна автентифікація (MFA);



Засоби аутентифікації:

- Стандартна (django.contrib.auth). Голона перевага - простота використовування, недоліки - безпека за умовчанням.
- Аутентифікація через соціальні мережі (OAuth2). Голона перевага - масштабованість, недоліки - ризик витоку токенів.
- Багатофакторна автентифікація (MFA). Голона перевага - підвищена безпека,  недоліки - незручність.
- Рольове керування доступом (RBAC). Голона перевага - гнучкість у використанні, недоліки - не підтримує складніших сценаріїв.


Основні загрози для сесії:

- Угон.
- Перехопленя сесії.
- CSRF.
- XSS.
- Впровадження сесій у відкритих чи небезпечних каналах зв'язку.


Способи захисту сесій у Django:

- Використовування HTTPS (SSL/TLS).
- Використовування Secure Cookies.
- Захист від угону сесій та CSRF.
- Захист від атак XSS.

Захист від DDoS атак

Для захисту використовують CDN (Content Delivery Network), веб-фаєрволів (WAF), обмеження швидкості запитів (Rate Limiting),
використання проксі-серверів, балансувальників навантаження та налаштування обмежень на рівні програми, використання антиботів та CAPTCHA.



